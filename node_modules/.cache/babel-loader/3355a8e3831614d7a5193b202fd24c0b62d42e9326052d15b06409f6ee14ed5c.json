{"ast":null,"code":"const handleAnalyze = () => {\n  if (!userInput.trim()) {\n    setAnalysisResult({\n      text: \"Please enter text before analyzing.\",\n      type: \"default\"\n    });\n    return;\n  }\n  setIsLoading(true);\n  setAnalysisResult(\"\"); // Clear previous result\n\n  axios.post(\"http://127.0.0.1:5000/detect_phishing\", {\n    text: userInput\n  }).then(response => {\n    setIsLoading(false);\n    if (response.data.analysis) {\n      // Extract classification from the analysis response\n      let resultText = response.data.analysis;\n      let resultType = \"default\"; // Default styling if classification is unclear\n\n      if (resultText.includes(\"Safe\")) {\n        resultType = \"safe\";\n      } else if (resultText.includes(\"Suspicious\")) {\n        resultType = \"suspicious\";\n      } else if (resultText.includes(\"Danger\")) {\n        resultType = \"danger\";\n      }\n      setAnalysisResult({\n        text: resultText,\n        type: resultType\n      });\n    } else {\n      setAnalysisResult({\n        text: \"No analysis received.\",\n        type: \"default\"\n      });\n    }\n  }).catch(error => {\n    setIsLoading(false);\n    setAnalysisResult({\n      text: `Error: ${error.message}`,\n      type: \"default\"\n    });\n  });\n};","map":{"version":3,"names":["handleAnalyze","userInput","trim","setAnalysisResult","text","type","setIsLoading","axios","post","then","response","data","analysis","resultText","resultType","includes","catch","error","message"],"sources":["C:/Users/Hyps/Desktop/hackRU/frontend/src/index.js"],"sourcesContent":["const handleAnalyze = () => {\n  if (!userInput.trim()) {\n    setAnalysisResult({ text: \"Please enter text before analyzing.\", type: \"default\" });\n    return;\n  }\n\n  setIsLoading(true);\n  setAnalysisResult(\"\"); // Clear previous result\n\n  axios\n    .post(\"http://127.0.0.1:5000/detect_phishing\", { text: userInput })\n    .then((response) => {\n      setIsLoading(false);\n\n      if (response.data.analysis) {\n        // Extract classification from the analysis response\n        let resultText = response.data.analysis;\n        let resultType = \"default\"; // Default styling if classification is unclear\n\n        if (resultText.includes(\"Safe\")) {\n          resultType = \"safe\";\n        } else if (resultText.includes(\"Suspicious\")) {\n          resultType = \"suspicious\";\n        } else if (resultText.includes(\"Danger\")) {\n          resultType = \"danger\";\n        }\n\n        setAnalysisResult({ text: resultText, type: resultType });\n      } else {\n        setAnalysisResult({ text: \"No analysis received.\", type: \"default\" });\n      }\n    })\n    .catch((error) => {\n      setIsLoading(false);\n      setAnalysisResult({ text: `Error: ${error.message}`, type: \"default\" });\n    });\n};\n"],"mappings":"AAAA,MAAMA,aAAa,GAAGA,CAAA,KAAM;EAC1B,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,CAAC,EAAE;IACrBC,iBAAiB,CAAC;MAAEC,IAAI,EAAE,qCAAqC;MAAEC,IAAI,EAAE;IAAU,CAAC,CAAC;IACnF;EACF;EAEAC,YAAY,CAAC,IAAI,CAAC;EAClBH,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEvBI,KAAK,CACFC,IAAI,CAAC,uCAAuC,EAAE;IAAEJ,IAAI,EAAEH;EAAU,CAAC,CAAC,CAClEQ,IAAI,CAAEC,QAAQ,IAAK;IAClBJ,YAAY,CAAC,KAAK,CAAC;IAEnB,IAAII,QAAQ,CAACC,IAAI,CAACC,QAAQ,EAAE;MAC1B;MACA,IAAIC,UAAU,GAAGH,QAAQ,CAACC,IAAI,CAACC,QAAQ;MACvC,IAAIE,UAAU,GAAG,SAAS,CAAC,CAAC;;MAE5B,IAAID,UAAU,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE;QAC/BD,UAAU,GAAG,MAAM;MACrB,CAAC,MAAM,IAAID,UAAU,CAACE,QAAQ,CAAC,YAAY,CAAC,EAAE;QAC5CD,UAAU,GAAG,YAAY;MAC3B,CAAC,MAAM,IAAID,UAAU,CAACE,QAAQ,CAAC,QAAQ,CAAC,EAAE;QACxCD,UAAU,GAAG,QAAQ;MACvB;MAEAX,iBAAiB,CAAC;QAAEC,IAAI,EAAES,UAAU;QAAER,IAAI,EAAES;MAAW,CAAC,CAAC;IAC3D,CAAC,MAAM;MACLX,iBAAiB,CAAC;QAAEC,IAAI,EAAE,uBAAuB;QAAEC,IAAI,EAAE;MAAU,CAAC,CAAC;IACvE;EACF,CAAC,CAAC,CACDW,KAAK,CAAEC,KAAK,IAAK;IAChBX,YAAY,CAAC,KAAK,CAAC;IACnBH,iBAAiB,CAAC;MAAEC,IAAI,EAAE,UAAUa,KAAK,CAACC,OAAO,EAAE;MAAEb,IAAI,EAAE;IAAU,CAAC,CAAC;EACzE,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}